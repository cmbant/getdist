name: Build Mac App

on:
  workflow_dispatch:
    inputs:
      skip_signing:
        description: 'Skip signing and notarization (for testing only)'
        required: false
        default: false
        type: boolean
  push:
    branches: [ main, master, mac ]
    paths:
      - 'getdist/gui/**'
      - 'scripts/build_mac_app.py'
      - 'scripts/build_mac_app.sh'
      - '.github/workflows/build_mac_app.yml'

jobs:
  build:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        # Verify uv installation
        source "$HOME/.cargo/env"
        uv --version

    - name: Build Mac App
      run: |
        # Make the script executable
        chmod +x scripts/build_mac_app.sh
        # Show environment info
        echo "Python version:"
        python --version
        echo "uv version:"
        uv --version
        echo "Working directory:"
        pwd
        # Run the build script with verbose output
        ./scripts/build_mac_app.sh

    - name: Sign and Notarize Mac App
      if: github.event.inputs.skip_signing != 'true'
      uses: toitlang/action-macos-sign-notarize@v1.2.1
      with:
        certificate: ${{ secrets.MACOS_CERTIFICATE }}
        certificate-password: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        username: ${{ secrets.APPLE_ID }}
        password: ${{ secrets.APPLE_APP_PASSWORD }}
        apple-team-id: ${{ secrets.APPLE_TEAM_ID }}
        app-path: dist/GetDist GUI.app

    - name: Create DMG with Signed App
      if: github.event.inputs.skip_signing != 'true'
      run: |
        # Create a DMG with the signed and notarized app
        echo "Creating DMG with signed app..."
        # Create a temporary directory for the DMG contents
        mkdir -p "dist/dmg"
        # Copy the signed and notarized app bundle to the temporary directory
        cp -r "dist/GetDist GUI.app" "dist/dmg/"
        # Create a symlink to the Applications folder
        ln -s /Applications "dist/dmg/"
        # Create the DMG
        hdiutil create -volname "GetDist GUI" -srcfolder "dist/dmg" -ov -format UDZO "dist/GetDist-GUI.dmg"
        # Clean up
        rm -rf "dist/dmg"

        echo "Verifying app signature..."
        codesign --verify --verbose "dist/GetDist GUI.app"
        echo "Verifying app notarization..."
        spctl --assess --verbose=4 "dist/GetDist GUI.app"

    - name: Upload DMG
      uses: actions/upload-artifact@v4
      with:
        name: GetDist-GUI-DMG
        path: dist/GetDist-GUI.dmg

    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/GetDist-GUI.dmg
        draft: true
        prerelease: false
