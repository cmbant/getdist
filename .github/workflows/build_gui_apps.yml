name: Build GUI Apps
# This workflow builds both Mac and Windows GUI applications
# It replaces the previous separate workflows for each platform

on:
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to build'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - mac
          - windows
      skip_signing:
        description: 'Skip signing (for testing only)'
        required: false
        default: false
        type: boolean
  push:
    branches: [ main, master, mac ]
jobs:
  build-mac:
    if: github.event.inputs.platform == 'all' || github.event.inputs.platform == 'mac' || github.event.inputs.platform == null
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        # Add uv to PATH - on Mac it installs to .local/bin
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        # Refresh the PATH in the current shell
        export PATH="$HOME/.local/bin:$PATH"
        # Verify uv installation
        uv --version

    - name: Build Mac App
      run: |
        # Make the script executable
        chmod +x scripts/build_mac_app.sh
        # Show environment info
        echo "Python version:"
        python --version
        echo "uv version:"
        uv --version
        echo "Working directory:"
        pwd
        # Run the build script with verbose output
        ./scripts/build_mac_app.sh

    - name: Sign and Notarize Mac App
      if: github.event.inputs.skip_signing != 'true'
      env:
        MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
        MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        APP_STORE_CONNECT_KEY: ${{ secrets.APP_STORE_CONNECT_KEY }}
        APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        APP_STORE_CONNECT_API_ISSUER: ${{ secrets.APP_STORE_CONNECT_API_ISSUER }}
      run: |
        # Make the scripts executable
        chmod +x scripts/sign_mac_app.sh
        chmod +x scripts/notarize_mac_app.sh
        chmod +x scripts/create_mac_dmg.sh
        chmod +x scripts/fix_qt_frameworks.sh
        chmod +x scripts/fix_qt_bundle_ambiguity.sh

        # Sign the app (this will rename the app to replace spaces with underscores)
        echo "Signing the app..."
        ./scripts/sign_mac_app.sh "dist/GetDist GUI.app"

        # Notarize the app (use the renamed path with underscores)
        echo "Notarizing the app..."
        ./scripts/notarize_mac_app.sh "dist/GetDist_GUI.app"

        # Create DMG (use the renamed path with underscores)
        echo "Creating DMG..."
        ./scripts/create_mac_dmg.sh "dist/GetDist_GUI.app" "dist/GetDist-GUI.dmg"

    - name: Upload DMG
      uses: actions/upload-artifact@v4
      with:
        name: GetDist-GUI-DMG
        path: dist/GetDist-GUI.dmg

    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/GetDist-GUI.dmg
        draft: true
        prerelease: false

  build-windows:
    if: github.event.inputs.platform == 'all' || github.event.inputs.platform == 'windows' || github.event.inputs.platform == null
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        # Add uv to PATH - on Windows it installs to .local/bin
        echo "$HOME/.local/bin" >> $env:GITHUB_PATH
        # Refresh the PATH in the current shell
        $env:PATH = "$HOME/.local/bin;$env:PATH"
        # Verify uv installation
        uv --version

    - name: Build Windows App
      run: |
        # Show environment info
        echo "Python version:"
        python --version
        echo "uv version:"
        uv --version
        echo "Working directory:"
        pwd
        # Run the build script with verbose output
        ./scripts/build_windows_app.bat

    - name: Sign Windows App
      if: github.event.inputs.skip_signing != 'true'
      env:
        WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
        WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
      run: |
        # Run the signing script
        python ./scripts/sign_windows_app.py --dir dist/GetDistGUI

    - name: Install WiX Toolset
      run: |
        # Download WiX Toolset
        Invoke-WebRequest -Uri https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311.exe -OutFile wix311.exe
        # Install WiX silently
        Start-Process -FilePath .\wix311.exe -ArgumentList "/install","/quiet","/norestart" -Wait
        # Add WiX to PATH
        echo "C:\Program Files (x86)\WiX Toolset v3.11\bin" >> $env:GITHUB_PATH

    - name: Create MSI Installer
      run: |
        # Create MSI installer
        python ./scripts/create_windows_msi.py --input-dir dist/GetDistGUI --output-dir dist

    - name: Sign MSI Installer
      if: github.event.inputs.skip_signing != 'true'
      env:
        WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
        WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
      run: |
        # Get the MSI file path
        $msiFile = Get-ChildItem -Path dist -Filter "GetDist-GUI-*.msi" | Select-Object -First 1 -ExpandProperty FullName
        echo "Signing MSI installer: $msiFile"

        # Use our existing signing script with the MSI file
        python ./scripts/sign_windows_app.py --dir $msiFile

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: GetDist-GUI-Windows
        path: |
          dist/GetDist-GUI-*.zip
          dist/GetDist-GUI-*.msi

    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/GetDist-GUI-*.zip
          dist/GetDist-GUI-*.msi
        draft: true
        prerelease: false
